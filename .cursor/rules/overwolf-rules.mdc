---
description:
globs:
alwaysApply: false
---
# Overwolf API Integration Standards

## Game Events Protocol (GEP)
- Always use `window.gep` for game event interactions
- Required patterns:
  ```typescript
  // Initialize GEP
  window.gep.setRequiredFeatures({
    requiredFeatures: ['gameInfo', 'gameEvents']
  });

  // Subscribe to game events
  window.gep.onMessage((eventName, data) => {
    // Handle game events
    console.info(`Game Event: ${eventName}`, data);
  });

  // Get game information
  const gameInfo = await window.gep.getInfo();
  ```

## In-Game Overlays
- Use OSR (Off-Screen Rendering) for all game overlays
- Required patterns:
  ```typescript
  // Create overlay window
  const overlayWindow = await window.osr.openOSR({
    name: 'unique-overlay-name',
    height: 700,
    width: 500,
    show: true,
    transparent: true,
    resizable: true,
    webPreferences: {
      devTools: true,
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  // Handle overlay visibility
  window.osr.toggle(); // Toggle overlay visibility
  window.osr.show();   // Show overlay
  window.osr.hide();   // Hide overlay

  // Update hotkeys
  window.osr.updateHotkey({
    key: 'F1',
    modifiers: ['alt']
  });
  ```

## Input Management
- Use exclusive mode for game interaction
- Required patterns:
  ```typescript
  // Set exclusive mode
  window.overlay.setExclusiveModeType('native');

  // Update exclusive mode options
  window.overlay.updateExclusiveOptions({
    color: 'rgba(0, 0, 0, 0.5)',
    animationDuration: 100
  });

  // Set hotkey behavior
  window.overlay.setExclusiveModeHotkeyBehavior('toggle');
  ```

## Best Practices

### Game Events
- Always handle event errors gracefully
- Implement proper event cleanup
- Use typed event handlers
- Log event data for debugging
- Verify game support before subscribing to events
- Handle game launch/exit events properly

### Overlays
- Use unique window names
- Implement proper window lifecycle
- Handle window state persistence
- Consider game window position
- Implement proper cleanup
- Handle window focus/blur events
- Manage z-order appropriately

### Input Handling
- Use appropriate input modes
- Handle input conflicts
- Implement proper hotkey management
- Consider game interaction
- Test input in both windowed and fullscreen modes
- Handle input blocking when necessary

## Troubleshooting Guidelines

### Game Events Issues
1. Events not firing:
   - Verify game is supported
   - Check required features are set
   - Verify event subscription
   - Check game window detection
   - Verify game is running
   - Check for conflicting overlays

### Overlay Issues
1. Window visibility:
   - Check z-order settings
   - Verify transparency settings
   - Check game window detection
   - Verify OSR initialization
   - Check window positioning
   - Verify window state

2. Input issues:
   - Verify passthrough settings
   - Check exclusive mode configuration
   - Verify hotkey settings
   - Check input permissions
   - Test in different game modes
   - Verify input blocking

3. Performance issues:
   - Monitor window count
   - Check rendering efficiency
   - Verify cleanup procedures
   - Monitor memory usage
   - Check for memory leaks
   - Profile overlay rendering

## Common Patterns

### Game Detection
```typescript
// Check if game is running
const gameInfo = await window.gep.getInfo();
if (gameInfo.isRunning) {
  // Game is running, proceed with initialization
}
```

### Overlay Positioning
```typescript
// Position overlay relative to game window
const gameWindow = await window.gep.getGameWindow();
const overlayPosition = {
  x: gameWindow.x + 100,
  y: gameWindow.y + 100
};
window.osr.setPosition(overlayPosition);
```

### Event Cleanup
```typescript
// Clean up event listeners
const cleanup = () => {
  window.gep.removeAllListeners();
  window.osr.removeAllListeners();
};

// Call cleanup when needed
window.addEventListener('unload', cleanup);
```


